
class IPrange:
	def __init__(self, address, mpeg):
		self.address = address
		self.mpeg = mpeg
		self.addrlist = self.address.split(".")

	def MASK(self):
		mask = [0,0,0,0]
		for i in range(int(self.mpeg)):
			mask[int(i/8)] = mask[int(i/8)] + (1 << (7 - i % 8))
		return mask

	def NETWORK(self):
		network = []
		for i in range(4):
			network.append(int(self.addrlist[i]) & self.MASK()[i])
		return network

	def REVERSE(self):
		mask = self.MASK()
		for i in range(4):
			mask[i] = ~ mask[i] & 0xFF
		return mask

	def BROADCAST(self):
		broadcast = []
		net = self.NETWORK()
		rev = self.REVERSE()
		for i in range(4):
			broadcast.append(int(net[i])  | int(rev[i]))
		return broadcast

	def FIRST_ADDR(self):
		b = self.BROADCAST()
		net = self.NETWORK()
		f = []
		for i in range(4):
			if net[i] == b[i]:
				f.append(net[i])
			else:
				b[i] = ~ b[i] & 0xFF
				if i == 3 :
					f.append(net[i]+1)
				else:
					f.append(net[i])
		return f

	def LAST_ADDR(self):
		last_from_broadcast = self.BROADCAST()
		last_from_broadcast[-1] = last_from_broadcast[-1] & 0xFE
		return last_from_broadcast

def IPCalc(IP_MASK):
	if "/" in IP_MASK:
		address, mpeg = IP_MASK.split("/")
		obj = IPrange(address, mpeg)
		NETWORK  = str.join('.', [ str(octet) for octet in obj.NETWORK()])
		print("NETWORK :",  NETWORK)
		MASK = str.join('.', [ str(octet) for octet in obj.MASK()])
		print("MASK : ", MASK)
		BROADCAST= str.join('.', [ str(octet) for octet in obj.BROADCAST()])
		print("BROADCAST : ", BROADCAST)
		FIRST_IP =  obj.FIRST_ADDR()
		print("FIRST_IP : ", FIRST_IP)
		LAST_IP  = obj.LAST_ADDR()
		print("LAST_IP : ", LAST_IP)

		#return NETWORK, MASK, BROADCAST, FIRST_IP, LAST_IP
	else:
                print ("Please, Specify a valid MPEG Network -- 172.16.122.2/22")



IPCalc("192.168.10.1/24")
